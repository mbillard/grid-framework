$gf-prefix: 'col' !default;
$gf-row-prefix: 'row' !default;
$gf-gutter-width: 1rem !default;
$gf-smart-class-names: false !default;

// ------------------------------------------
// Grid framework extendable classes
// ------------------------------------------

%gf-col {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;

  .#{$gf-row-prefix}-gutter & {
    // Inner gutter via padding
    padding-left:  ($gf-gutter-width / 2);
    padding-right: ($gf-gutter-width / 2);
  }
}


// ------------------------------------------
// Grid framework functions
// ------------------------------------------

@function bp-class($bp) {
  @if ($bp == "") {
    @return "";
  } @else {
    @return "-#{$bp}";
  }
}

@function x-of-y-class($x, $y) {
  @if ($x == 0) {
    @return "0";
  }
  @if ($y % $x == 0) {
    @return "1-#{$y / $x}";
  }
}


// ------------------------------------------
// Grid framework mixins
// ------------------------------------------

@mixin common-columns-style($nb-columns-list, $bp) {
  @each $nb-columns in $nb-columns-list {
    $list: ".#{$gf-prefix}#{bp-class($bp)}-1-#{$nb-columns}";
    @for $i from 2 through $nb-columns {
      @if ($gf-smart-class-names and $nb-columns == $i) {
        $list: "#{$list}, .#{$gf-prefix}#{bp-class($bp)}-1";
      }
      @if ($gf-smart-class-names and $nb-columns % $i == 0) {
        $list: "#{$list}, .#{$gf-prefix}#{bp-class($bp)}-#{x-of-y-class($i, $nb-columns)}";
      }
      $list: "#{$list}, .#{$gf-prefix}#{bp-class($bp)}-#{$i}-#{$nb-columns}";
    }
    #{$list} {
      @extend %gf-col;
    }
  }
}

@mixin float-columns($nb-columns, $bp) {
  $list: ".#{$gf-prefix}#{bp-class($bp)}-1-#{$nb-columns}";
  @for $i from 2 through $nb-columns {
    @if ($gf-smart-class-names and $nb-columns == $i) {
      $list: "#{$list}, .#{$gf-prefix}#{bp-class($bp)}-1";
    }
    @if ($gf-smart-class-names and $nb-columns % $i == 0) {
      $list: "#{$list}, .#{$gf-prefix}#{bp-class($bp)}-#{x-of-y-class($i, $nb-columns)}";
    }
    $list: "#{$list}, .#{$gf-prefix}#{bp-class($bp)}-#{$i}-#{$nb-columns}";
  }
  #{$list} {
    float: left;
  }
}

@mixin make-column($index, $nb-columns, $bp) {
  @if ($gf-smart-class-names and $nb-columns == $index) {
    .#{$gf-prefix}#{bp-class($bp)}-1 {
      width: percentage(1);
    }
  } @elseif ($gf-smart-class-names and $index > 1 and $nb-columns % $index == 0) {
    .#{$gf-prefix}#{bp-class($bp)}-#{x-of-y-class($index, $nb-columns)} {
      width: percentage($index / $nb-columns);
    }
  }
  .#{$gf-prefix}#{bp-class($bp)}-#{$index}-#{$nb-columns} {
    width: percentage($index / $nb-columns);
  }
}

@mixin make-column-offset($index, $nb-columns, $bp) {
  @if ($gf-smart-class-names and $index > 1 and $nb-columns % $index == 0) {
    .#{$gf-prefix}-offset#{bp-class($bp)}-#{x-of-y-class($index, $nb-columns)} {
      margin-left: percentage($index / $nb-columns);
    }
  }
  .#{$gf-prefix}-offset#{bp-class($bp)}-#{$index}-#{$nb-columns} {
    margin-left: percentage($index / $nb-columns);
  }
}

@mixin make-column-push($index, $nb-columns, $bp) {
  @if ($index == 0) {
    .#{$gf-prefix}-push#{bp-class($bp)}-0 {
      left: auto;
    }
  } @else {
    @if ($gf-smart-class-names and $index > 1 and $nb-columns % $index == 0) {
      .#{$gf-prefix}-push#{bp-class($bp)}-#{x-of-y-class($index, $nb-columns)} {
        left: percentage($index / $nb-columns);
      }
    }
    .#{$gf-prefix}-push#{bp-class($bp)}-#{$index}-#{$nb-columns} {
      left: percentage($index / $nb-columns);
    }
  }
}

@mixin make-column-pull($index, $nb-columns, $bp) {
  @if ($index == 0) {
    .#{$gf-prefix}-pull#{bp-class($bp)}-0 {
      right: auto;
    }
  } @else {
    @if ($gf-smart-class-names and $index > 1 and $nb-columns % $index == 0) {
      .#{$gf-prefix}-pull#{bp-class($bp)}-#{x-of-y-class($index, $nb-columns)} {
        right: percentage($index / $nb-columns);
      }
    }
    .#{$gf-prefix}-pull#{bp-class($bp)}-#{$index}-#{$nb-columns} {
      right: percentage($index / $nb-columns);
    }
  }
}

@mixin loop-columns($nb-columns, $bp, $options) {
  @for $i from 0 through $nb-columns - 1 {
    @if ($i > 0) {
      @include make-column($i, $nb-columns, $bp);
    }

    @each $option in $options {
      @if ($i > 0 and $option == 'offset') {
        @include make-column-offset($i, $nb-columns, $bp)
      }
      @if ($option == 'push') {
        @include make-column-push($i, $nb-columns, $bp)
      }
      @if ($option == 'pull') {
        @include make-column-pull($i, $nb-columns, $bp)
      }
    }
  }
  @include make-column($nb-columns, $nb-columns, $bp);
}

// Create grid for specific class
@mixin make-grid($nb-columns-list, $bp, $options: 'offset') {
  @include common-columns-style($nb-columns-list, $bp);

  @each $nb-columns in $nb-columns-list {
    @include float-columns($nb-columns, $bp);
    @include loop-columns($nb-columns, $bp, $options);
  }
}

// Creates a wrapper for a series of columns
@mixin make-rows {
  .#{$gf-row-prefix} {
    // micro clearfix by Nicolas Gallagher
    // http://nicolasgallagher.com/micro-clearfix-hack/
    &:before,
    &:after {
      content: " ";
      display: table;
    }
    &:after {
      clear: both;
    }
  }

  @if ($gf-gutter-width > 0) {
    .#{$gf-row-prefix}-gutter {
      margin-left:  ($gf-gutter-width / -2);
      margin-right: ($gf-gutter-width / -2);
    }
  }
}
